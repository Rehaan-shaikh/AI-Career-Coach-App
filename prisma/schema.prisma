generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String    // üîê hashed password
  name            String?
  imageUrl        String?
  industry        String?    
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Profile fields
  bio             String?
  experience      Int?
  skills          String[]

  // Relations
  assessments     Assessment[]
  resume          Resume?
  coverLetter     CoverLetter[]
}


model Assessment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  quizScore     Float     // Overall quiz score
  questions     Json[]    // an array of JSON objects which holds {question, answer, userAnswer, isCorrect}
  category      String    // "Technical", "Behavioral", etc.
  improvementTip String?  // AI-generated improvement tip
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  // create an index on the userId field.
  // An index is like a fast lookup table in the database. It speeds up queries that search, filter, or join based on that field.
}

model Resume {
  id          String    @id @default(cuid())
  userId      String    @unique    // One resume per user [1 to 1 relationship]
  user        User      @relation(fields: [userId], references: [id])
  content     String    @db.Text // Markdown content
  //This tells Prisma: ‚ÄúEven though this is a String in Prisma, store it in the database as a TEXT column (instead of the default VARCHAR(191)for string in PostgreSQL).‚Äù
  atsScore    Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CoverLetter {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String    // Markdown content
  jobDescription  String?
  companyName     String    // Name of the company applying to
  jobTitle        String    // Position applying for
  status          String    @default("draft") // draft, completed
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}

// Combined Industry Trends and Salary Insights
model IndustryInsight {
  id            String    @id @default(cuid())
  industry      String    @unique  // The industry this data belongs to (e.g., "tech-software-development")
  
  // Users in this industry
  users         User[]
  
  // Salary data
  salaryRanges  Json[]    //  an array of JSON objects holds: { role: string, min: float, max: float, median: float, location: string? }
  
  // Industry trends
  growthRate    Float     // Industry growth rate
  demandLevel   String    // "High", "Medium", "Low"
  topSkills     String[]  // Most in-demand skills
  
  // Market conditions
  marketOutlook String    // "Positive", "Neutral", "Negative"
  keyTrends     String[]  // Array of current industry trends
  
  // Learning suggestions
  recommendedSkills String[]  // Skills recommended for the industry
  
  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime  // Scheduled update time

  @@index([industry])
}